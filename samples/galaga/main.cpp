////////////////////////////
// main.cpp
// - independent render loop
//   - engine.move
//   - engine.render
////////////////////////////

#include "stdafx.h"
#include "resource.h"

#include "zweidee.h"    // draw to 2D buffer
#include "engine.h"     //   run a 2D game

#include <windows.h>    // Header File For Windows
//#include <windowsx.h>   // GET_X_LPARAM, GET_Y_LPARAM

#define GLEW_STATIC
#include <GL/glew.h>

#include <process.h>    // _beginthread

                                                  // forward declaration of functions in this code module
ATOM             MyRegisterClass(HINSTANCE hInstance);
//BOOL             InitInstance(HINSTANCE, int);
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//INT_PTR CALLBACK About(HWND, UINT, WPARAM, LPARAM);

HGLRC            hRC = NULL;                      // Permanent Rendering Context
HDC              hDC = NULL;                      // Private GDI Device Context
//HWND             hWnd = NULL;                     // Holds Our Window Handle

zweidee::Engine m_engine;

// Galaga screen dimension, 2do --> hand over to zweide::engine/ ::render!!
int playfield_w = 256;
int playfield_h = 256;
// windows dimension (the later may be changed with resize
int win_h = 512;
int win_w = 512;

static float fps = 0.0f;                        // This will store our fps
static float lastTime = 0.0f;                   // This will hold the time from the last frame
dword lasttickcount = 0;
dword accumulatedTimeSinceLastUpdate = 0;

bool b_WM_resized = false;

void CalculateFrameRate()
{
  float currentTime = GetTickCount() * 0.001f;
  ++fps;
  if (currentTime - lastTime > 1.0f)
  {
    lastTime = currentTime;
    fps = 0.0;
  }
}

// Fix Timing
// https://gafferongames.com/post/fix_your_timestep/

// OpenGL calls moved to own thread
// s. http://stackoverflow.com/questions/9833852/opengl-game-loop-multithreading
void RenderThread(void *args)
{
  lasttickcount = GetTickCount();
  while (true)
  {
    accumulatedTimeSinceLastUpdate += (GetTickCount() - lasttickcount); // GetTickCount [ms] dword
    lasttickcount = GetTickCount();

    if (accumulatedTimeSinceLastUpdate > 12) // indep. from gfx-card -> update every 12 [ms]
    {
      accumulatedTimeSinceLastUpdate = 0;

      //      if (GetAsyncKeyState(VK_SPACE)) m_proj.fire(); // no rapid fire :-)
      if (GetAsyncKeyState(VK_UP))    m_engine.up();
      if (GetAsyncKeyState(VK_DOWN))  m_engine.down();
      if (GetAsyncKeyState(VK_LEFT))  m_engine.left();
      if (GetAsyncKeyState(VK_RIGHT)) m_engine.right();

      m_engine.move();
    }

    if (b_WM_resized)
    {
      // 2do: move from engine to zweidee -->
      m_engine.m_render.ReSizeGLScene(win_w, win_h);
      b_WM_resized = false;
    }

    m_engine.render(); // render update-rate independent from move() (s. above) 
  }
  _endthread();
}

int APIENTRY _tWinMain(HINSTANCE hInstance,
  HINSTANCE hPrevInstance,
  LPTSTR    lpCmdLine,
  int       nCmdShow)
{
  UNREFERENCED_PARAMETER(hPrevInstance);
  UNREFERENCED_PARAMETER(lpCmdLine);

  MSG msg;
  HACCEL hAccelTable;

  zweidee::hWnd = NULL;
  
  // init global strings
  LoadString(hInstance, IDS_APP_TITLE, zweidee::szTitle, MAX_LOADSTRING);  // window title etc. see .rc
  LoadString(hInstance, IDC_ZWEIDEE, zweidee::szWindowClass, MAX_LOADSTRING);
  MyRegisterClass(hInstance);

  // init application
  if (!zweidee::InitInstance(hInstance, nCmdShow, win_w, win_h))
  {
    return FALSE;
  }

  // 2do: this should be zweidee -->
  m_engine.m_render.width = win_w; // this will size the viewport
  m_engine.m_render.height = win_h;
  hDC = m_engine.m_render.GL_attach_to_DC(zweidee::hWnd); // <== NeHe    

  glewExperimental = GL_TRUE; // <-- Nutzen?
  glewInit(); // <-- takes a little time

              // 2do: this should be zweidee -->
  m_engine.init();	// <-- Textures erst nach glewInit() laden!!
                    // a) data loading + b) data description c) render.Init()

  hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_ZWEIDEE));

  _beginthread(RenderThread, 0, 0);

  // main message loop
  while (GetMessage(&msg, NULL, 0, 0))
  {
    wglMakeCurrent(NULL, NULL); // <-- no other access to OpenGL here!! --> only in RenderThread 

    if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
    {
      TranslateMessage(&msg);
      DispatchMessage(&msg);
    }

    // --> rendering moved to RenderThread, otherwise no autonomous object-movement possible
  }

  return (int)msg.wParam;
}

// autogenerated: register window class (mandatory)
ATOM MyRegisterClass(HINSTANCE hInstance)
{
  WNDCLASSEX wcex;

  wcex.cbSize = sizeof(WNDCLASSEX);

  wcex.style = CS_HREDRAW | CS_VREDRAW;
  wcex.lpfnWndProc = WndProc;
  wcex.cbClsExtra = 0;
  wcex.cbWndExtra = 0;
  wcex.hInstance = hInstance;
  wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ZWEIDEE));
  wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
  wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
  wcex.lpszMenuName = MAKEINTRESOURCE(IDC_ZWEIDEE);
  wcex.lpszClassName = zweidee::szWindowClass;
  wcex.hIconSm = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

  return RegisterClassEx(&wcex);
}

// moved to zweidee.h --> BOOL InitInstance(HINSTANCE hInstance, int nCmdShow, int w, int h)

// autogenerated: process main window's messages
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
  int wmId, wmEvent;

  switch (message)
  {
  case WM_MOUSEWHEEL:
    // http://msdn.microsoft.com/en-us/library/windows/desktop/ms645617(v=vs.85).aspx
    break;
  case WM_MOUSEMOVE:
    // http://msdn.microsoft.com/en-us/library/windows/desktop/ms645616(v=vs.85).aspx
    break;
  case WM_COMMAND:
    wmId = LOWORD(wParam);
    wmEvent = HIWORD(wParam);
    // process menu choice
    switch (wmId)
    {
    case IDM_ABOUT:
      DialogBox(zweidee::hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, zweidee::About);
      break;
    case IDM_EXIT:
      DestroyWindow(hWnd);
      break;
    default:
      return DefWindowProc(hWnd, message, wParam, lParam);
    }
    break;
    //	case WM_PAINT:
    // ... painting by OpenGL
  case WM_KEYDOWN:

    switch (wParam)
    {
    case 32: // Space
      m_engine.fire(); // single fire
      break;
    case 37: // ARROW-LEFT
      break;
    case 39: // ARROW-RIGHT
      break;
    case 79: // O >> Step
      m_engine.bStep = true;
      break;
    case 80: // P >> Pause ON/OFF
      m_engine.bPause = !(m_engine.bPause);
      break;
    case 87: // W
      break;
    case 65: // A
      break;
    case 83: // S
      break;
    case 68: // D
      break;
    }
    break;
  case WM_SIZE:
    win_w = LOWORD(lParam);
    win_h = HIWORD(lParam);
    // resize --> in the thread now, as from here no access to OpenGL-context
    b_WM_resized = true;
    break;
  case WM_DESTROY:
    PostQuitMessage(0);
    break;
  default:
    return DefWindowProc(hWnd, message, wParam, lParam);
  }
  return 0;
}

// moved to zweidee.h --> INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
