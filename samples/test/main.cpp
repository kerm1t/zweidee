//////////////////////////////
// main.cpp
// - random noise
//////////////////////////////

#include "stdafx.h"
#include "resource.h"

#include "zweidee.h"    // draw to 2D buffer

#include <windows.h>    // Header File For Windows

#define GLEW_STATIC
#include <GL/glew.h>

#include <process.h>    // _beginthread

// forward declaration of functions in this code module
//ATOM             MyRegisterClass(HINSTANCE hInstance);
//LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);




//////////////////////////
// put your variables here
//////////////////////////

void do_stuff_here() // b) function
{
  for (int i = 0; i < FBUF2D_PIXELS; i++)
  {
    int x = i % FBUF2D_WIDTH;
    int y = i / FBUF2D_WIDTH;
    zweidee::fbuf2d.setpixel(zweidee::data, x, y, rand(), rand(), rand());
  }
  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, zweidee::fbuf2d.width, zweidee::fbuf2d.height, 0, GL_BGR, GL_UNSIGNED_BYTE, zweidee::data);
}

// moved to zweidee.h --> void RenderThread(void *args)

int APIENTRY _tWinMain(HINSTANCE hInstance,
  HINSTANCE hPrevInstance,
  LPTSTR    lpCmdLine,
  int       nCmdShow)
{
  UNREFERENCED_PARAMETER(hPrevInstance);
  UNREFERENCED_PARAMETER(lpCmdLine);

  MSG msg;
  HACCEL hAccelTable;

  zweidee::hRC = NULL;
  zweidee::hDC = NULL;
  zweidee::hWnd = NULL;
  zweidee::fps = 0.0f;
  zweidee::lastTime = 0.0f;
  zweidee::b_WM_resized = false;

  // init global strings
  LoadString(hInstance, IDS_APP_TITLE, zweidee::szTitle, MAX_LOADSTRING);  // window title etc. see .rc
  LoadString(hInstance, IDC_ZWEIDEE, zweidee::szWindowClass, MAX_LOADSTRING);
  zweidee::MyRegisterClass(hInstance);

  if (!zweidee::InitInstance(hInstance, nCmdShow, zweidee::win_w, zweidee::win_h)) // init application
  {
    return FALSE;
  }

  zweidee::m_render.Init(zweidee::win_w, zweidee::win_h);

  zweidee::data = new unsigned char[FBUF2D_SIZE]; // size = pixels*3 (r,g,b)
  GLuint texID = zweidee::fbuf2d.Init(FBUF2D_WIDTH, FBUF2D_HEIGHT);

  zweidee::m_render.Setup_Geometry(texID);




  ///////////////
  // Init
  ///////////////

  zweidee::doit = do_stuff_here; // c) init function pointer




  // stuff is done here
  _beginthread(zweidee::RenderThread, 0, 0);




  hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_ZWEIDEE));
  // main message loop
  while (GetMessage(&msg, NULL, 0, 0))
  {
    wglMakeCurrent(NULL, NULL); // <-- no other access to OpenGL here!! --> only in RenderThread 

    if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
    {
      TranslateMessage(&msg);
      DispatchMessage(&msg);
    }

    // --> rendering moved to RenderThread, otherwise no autonomous object-movement possible
  }

  delete zweidee::data;

  return (int)msg.wParam;
}

// moved to zweidee.h --> autogenerated: register window class (mandatory)

// moved to zweidee.h --> BOOL InitInstance(HINSTANCE hInstance, int nCmdShow, int w, int h)

// moved to zweidee.h --> autogenerated: process main window's messages

// moved to zweidee.h --> INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
